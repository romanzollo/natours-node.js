// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É mongoose
const mongoose = require('mongoose');
// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ config.env
require('dotenv').config();
/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express –∏–∑ —Ñ–∞–π–ª–∞ app.js
 * –¢–∞–º —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã middleware, –º–∞—Ä—à—Ä—É—Ç—ã –∏ –ø—Ä–æ—á–∞—è –ª–æ–≥–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
const app = require('./app');

// –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞–ø—Ä—è–º—É—é –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
// –∑–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä '<PASSWORD>' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const DB = process.env.DATABASE.replace(
  '<PASSWORD>',
  process.env.DATABASE_PASSWORD
);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
mongoose.connection.on('connected', () => {
  console.log('MongoDB connected');
});
mongoose.connection.on('error', err => {
  console.error('MongoDB connection error:', err);
});
mongoose.connection.on('disconnected', () => {
  console.log('MongoDB disconnected, attempting to reconnect...');
  setTimeout(connectDB, 5000); // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
});

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É Mongoose –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
async function connectDB() {
  try {
    await mongoose.connect(DB);
    console.log('DB connection successful!');
  } catch (error) {
    console.error('DB connection error:', error);
  }
}

connectDB();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –º–æ–¥–µ–ª–∏
const tourSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: [true, 'Tour must have a name'],
      unique: true,
      trim: true, // –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å—Ç—Ä–æ–∫
      maxlength: [100, 'Name cannot exceed 100 characters']
    },
    rating: {
      type: Number,
      default: 4.5,
      min: [1, 'Rating must be at least 1.0'],
      max: [5, 'Rating cannot exceed 5.0']
    },
    price: {
      type: Number,
      required: [true, 'Tour must have a price'],
      min: [0, 'Price cannot be negative']
    }
  },
  {
    timestamps: true // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ—Ç createdAt –∏ updatedAt
  }
);
// –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
const Tour = mongoose.model('Tour', tourSchema);

const testTour = new Tour({
  name: 'The Forest Hiker',
  rating: 4.7,
  price: 497
});

const saveTour = async () => {
  try {
    const doc = await testTour.save();
    console.log(doc);
  } catch (error) {
    console.log('ERROR üí£: ', error);
  }
};
saveTour();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
const port = process.env.PORT || 8000;

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
app.listen(port, () => {
  console.log(`App running on port ${port}...`);
});
